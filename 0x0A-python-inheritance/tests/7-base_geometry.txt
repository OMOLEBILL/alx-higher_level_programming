importing the class from the module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


Checking for module docstring:
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

Checking for class docstring:
>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
True


Checking for method docstring:
 >>> f = __import__("7-base_geometry").BaseGeometry.area.__doc__
 >>> len(f) > 1
 True


Checking for method docstring
>>> f = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(f) > 1
True

checking the given conditions:

        >>> bg = BaseGeometry()

        >>> bg.integer_validator("my_int", 12)

        >>> bg.integer_validator("width", 89)

        >>> bg.integer_validator("name", "John")
        Traceback (most recent call last):
        ...
        TypeError: <name> must be an integer

        >>> bg.integer_validator("age", 0)
        Traceback (most recent call last):
        ...
        ValueError: <name> must be greater than 0

        >>> bg.integer_validator("distance", -4)
        Traceback (most recent call last):
        ...
        ValueError: <name> must be greater than 0

        >>> bg.integer_validator()
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

        >>> bg.integer_validator("my_int")
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

        >>> bg.integer_validator("my_int", 12, 50)
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() takes 3 positional arguments but 4 were given
